{"version":3,"sources":["App.js","index.js"],"names":["App","props","pickedTracks","vkId","telegramId","hash","icon","API_URL","onCheckboxChange","e","track","JSON","parse","currentTarget","dataset","index","url","title","artist","sendTracks","a","bridge","send","fetch","then","res","json","setActiveModal","filter","length","method","headers","body","stringify","activeModal","setState","state","scheme","tracks","subscribe","detail","type","data","id","keys","value","console","log","response","permission","key","result","Array","modal","this","onClose","modalBack","header","caption","style","marginTop","mode","size","href","target","activePanel","left","onClick","map","before","width","height","marginRight","background","album","thumb","photo_68","backgroundSize","after","data-track","onChange","description","vertical","wide","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f16a953f.chunk.js","sourcesContent":["import React from 'react';\nimport bridge from '@vkontakte/vk-bridge';\nimport { View, Panel, PanelHeader, Div, Card, SimpleCell, Checkbox, ConfigProvider, FixedLayout, Button, Separator, PanelHeaderButton, ModalRoot, ModalCard  } from '@vkontakte/vkui';\nimport '@vkontakte/vkui/dist/vkui.css';\nimport './App.css';\n\nclass App extends React.Component {\n\tpickedTracks = [];\n\tvkId = null;\n\ttelegramId = null;\n    hash = null;\n\ticon = 'data:image/svg+xml;charset=utf-8,%3Csvg%20height%3D%2224%22%20viewBox%3D%220%200%2024%2024%22%20width%3D%2224%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cg%20fill%3D%22none%22%20fill-rule%3D%22evenodd%22%3E%3Cpath%20d%3D%22m0%200h24v24h-24z%22%20opacity%3D%22.4%22%2F%3E%3Cpath%20d%3D%22m13%2011.4849987v5.6482897c0%204.5123987-.8747233%205.3834431-4.37440289%205.8421935-1.6682259.2186769-3.62559711-.5384568-3.62559711-3.1617096%200-1.2814037.80181302-2.498263%202.46114282-2.8162494%201.26723039-.2428462-.09078118.0181935%202.77607228-.5140396.6959753-.1292083.7748413-.3782301.7748413-.908791%200-.2664094-.0013183-2.5951438-.0022416-4.1936475l-.0073943-.0003862v-4.31781414s-.0054461-2.05827203%200-3.08739758c.0065136-1.23086488.6796458-1.68321833%202.6637921-2.08397579%200%200%203.0232113-.57396781%204.6852252-.87541989.367783-.06670761.6485622.07018054.6485622.49202579%200%200-.0106774%202.62210108%200%204.05433854.0031006.41590408-.168424.60420104-.5899711.67902227-1.6816987.29848801-4.8649278.86036181-4.8649278.86036181-.3738792.09182758-.5451011.35499958-.5451011.73329156z%22%20fill%3D%22%236f99c8%22%20fill-rule%3D%22nonzero%22%2F%3E%3C%2Fg%3E%3C%2Fsvg%3E';\n    API_URL = 'https://s23209.h10.modhost.pro';\n\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tscheme: 'bright_light',\n\t\t\ttracks: [],\n            activeModal: null\n\t\t};\n\t}\n\n\tonCheckboxChange = (e) => {\n\t\tconst track = JSON.parse(e.currentTarget.dataset.track);\n\t\tthis.pickedTracks[track.index] = this.pickedTracks[track.index] ? null : { url: track.url, title: track.title, artist: track.artist };\n\t}\n\n\tsendTracks = async () => {\n        if (!this.vkId) {\n            return await bridge.send('VKWebAppJoinGroup', {'group_id': 184374271});\n        }\n\n        if (!this.telegramId) {\n            this.hash = (await fetch(`${this.API_URL}/getHash?id=${this.vkId}`).then(res => res.json())).hash;\n            return this.setActiveModal('TelegramAuth');\n        }\n\n\t\tthis.pickedTracks = this.pickedTracks.filter(track => !!track);\n\t\t\n\t\tif (!this.pickedTracks.length) {\n\t\t\t// modal 'please pick tracks'\n\t\t\treturn;\n\t\t}\n\n\t\t// accept choice\n\n\t\tfetch(`${this.API_URL}/sendTracks?id=${this.telegramId}`, {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t  \t\t'Content-Type': 'application/json'\n\t\t\t},\n\t\t\tbody: JSON.stringify(this.pickedTracks),\n\t\t})\n\t}\n\n    setActiveModal = (activeModal) => {\n        this.setState({ activeModal });\n    };\n\n\tasync componentDidMount() {\n\t\tbridge.subscribe(async ({ detail: { type, data }}) => {\n\t\t\tif (type === 'VKWebAppUpdateConfig') {\n\t\t\t\tthis.setState({ scheme: data.scheme });\n\t\t\t} else if (type === 'VKWebAppInitResult') {\n\t\t\t\tthis.vkId = (await bridge.send(\"VKWebAppGetUserInfo\", {})).id;\n\t\t\t\tthis.telegramId = (await bridge.send('VKWebAppStorageGet', {keys: ['telegramId']})).keys[0].value;\n                console.log(this.telegramId);\n\n                const response = await fetch(`${this.API_URL}/getUser?id=${this.vkId}`).then(res => res.json());\n                console.log(response);\n                const permission = response.permission;\n\n                if (!permission) {\n                    await bridge.send('VKWebAppJoinGroup', {'group_id': 184374271});\n                    // ask to auth\n                    // return\n                }\n\n\t\t\t\tif (!this.telegramId || this.telegramId === 'false') {\n\t\t\t\t\tconsole.log(response);\n\t\t\t\t\tthis.telegramId = response.telegramId;\n\n\t\t\t\t\tif (!this.telegramId) {\n                        this.hash = (await fetch(`${this.API_URL}/getHash?id=${this.vkId}`).then(res => res.json())).hash;\n                        return this.setActiveModal('TelegramAuth');\n\t\t\t\t\t}\n\n\t\t\t\t\tconst res = await bridge.send('VKWebAppStorageSet', { key: 'telegramId', value: `${this.telegramId}` })\n\t\t\t\t\tconsole.log(res);\n\t\t\t\t}\n\n\t\t\t\tfetch(`${this.API_URL}/getTracks?id=${this.vkId}`)\n\t\t\t\t\t.then(res => res.json())\n\t\t\t\t\t.then(result => {\n\t\t\t\t\t\tthis.pickedTracks = new Array(result.tracks.length)\n\t\t\t\t\t\tthis.setState({ tracks: result.tracks })\n\t\t\t\t\t})\n\t\t\t}\n\t\t});\n\t}\n\n\trender() {\n        const modal = (<ModalRoot\n                        activeModal={this.state.activeModal}\n                        onClose={this.modalBack}\n                      >\n                        <ModalCard\n                            id={ 'TelegramAuth' }\n                            onClose={() => this.setActiveModal(null)}\n                            header='Авторизуйся в телеграме'\n                            caption='Чтобы я смог отправить тебе трек в телеграм, тебе нужно авторизоваться в нем'\n                        >\n                            <Button \n                                style={{ marginTop: 16 }} \n                                mode='secondary' size='xl' \n                                href={ `https://t.me/ilushaR_bot?start=${this.vkId}-${this.hash}` }\n                                target='_blank'\n                            >\n                                    Telegram Authorization 🔓\n                            </Button>\n                        </ModalCard>\n                      </ModalRoot>)\n\n\t\treturn (\n\t\t\t<ConfigProvider scheme={ this.state.scheme }>\n\t\t\t\t<View activePanel='main' modal={ modal }>\n\t\t\t\t\t<Panel id='main'>\n                        <PanelHeader left={\n                            <PanelHeaderButton onClick={ async () => {\n                                this.hash = (await fetch(`${this.API_URL}/getHash?id=${this.vkId}`).then(res => res.json())).hash;    \n                                this.setActiveModal('TelegramAuth') \n                            } \n                            }>Выбрать все</PanelHeaderButton>\n                        }>\n                            Audio Bot\n                        </PanelHeader>\n\t\t\t\t\t\t{ this.state.tracks.map((track, index) => \n\t\t\t\t\t\t\t(<Div key={ track.id }>\n\t\t\t\t\t\t\t\t<SimpleCell \n\t\t\t\t\t\t\t\t\tbefore={\n\t\t\t\t\t\t\t\t\t\t<Card \n\t\t\t\t\t\t\t\t\t\t\tsize='m' \n\t\t\t\t\t\t\t\t\t\t\tstyle={{ width: 40, height: 40, marginRight: 10, background: `url(${ track.album && track.album.thumb ? track.album.thumb.photo_68 : this.icon}) no-repeat center #e5ebf1`, backgroundSize: 'cover'}} \n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t\t\tafter={ <Checkbox data-track={JSON.stringify({ index, url: track.url, title: track.title, artist: track.artist })} onChange={ this.onCheckboxChange }/> } \n\t\t\t\t\t\t\t\t\tdescription={ track.artist } \n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{ track.title } \n\t\t\t\t\t\t\t\t</SimpleCell>\n\t\t\t\t\t\t\t</Div>)\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t<FixedLayout vertical='bottom'>\n\t\t\t\t\t\t\t<Separator wide />\n\t\t\t\t\t\t\t<Button onClick={ this.sendTracks } size='xl'>Скачать</Button>\n\t\t\t\t\t\t</FixedLayout>\n\t\t\t\t\t</Panel>\n\t\t\t\t</View>\n\t\t\t</ConfigProvider>\n\t\t);\n\t}\n}\n\nexport default App;","import \"core-js/features/map\";\nimport \"core-js/features/set\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport bridge from \"@vkontakte/vk-bridge\";\nimport App from \"./App\";\n\nbridge.send(\"VKWebAppInit\");\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}